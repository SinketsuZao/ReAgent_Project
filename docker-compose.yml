version: '3.8'

services:
  # Redis - Message broker and cache
  redis:
    image: redis:7-alpine
    container_name: reagent_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - reagent_network

  # PostgreSQL - Primary database
  postgres:
    image: postgres:15-alpine
    container_name: reagent_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-reagent_db}
      POSTGRES_USER: ${POSTGRES_USER:-reagent_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-reagent_user}"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - reagent_network

  # Elasticsearch - Document search and retrieval
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: reagent_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=reagent-cluster
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - reagent_network

  # ReAgent API Service
  reagent_api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: reagent_api
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - ELASTICSEARCH_HOST=elasticsearch
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MODEL=${LLM_MODEL:-gpt-4o}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --workers ${API_WORKERS:-4}
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - reagent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ReAgent Worker Service
  reagent_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: reagent_worker
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - ELASTICSEARCH_HOST=elasticsearch
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MODEL=${LLM_MODEL:-gpt-4o}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    command: celery -A worker.celery_app worker --loglevel=${LOG_LEVEL:-info} --concurrency=${CELERY_WORKER_CONCURRENCY:-4}
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - reagent_network
    deploy:
      replicas: ${WORKER_REPLICAS:-3}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Celery Beat Scheduler (for periodic tasks)
  reagent_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: reagent_beat
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: celery -A worker.celery_app beat --loglevel=${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
    networks:
      - reagent_network

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: reagent_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerting/rules.yml:/etc/prometheus/rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-15d}'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - reagent_network
    depends_on:
      - reagent_api

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: reagent_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - reagent_network
    depends_on:
      - prometheus

  # Nginx - Reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: reagent_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
    networks:
      - reagent_network
    depends_on:
      - reagent_api
    profiles:
      - production

  # Redis Commander - Redis GUI (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: reagent_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - reagent_network
    depends_on:
      - redis
    profiles:
      - development

  # pgAdmin - PostgreSQL GUI (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: reagent_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@reagent.local
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - reagent_network
    depends_on:
      - postgres
    profiles:
      - development

# Networks
networks:
  reagent_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# Volumes
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local