"""
Alembic environment configuration for ReAgent database migrations.

This module configures Alembic to work with the ReAgent database schema,
supporting both online and offline migrations.
"""

import os
import sys
from logging.config import fileConfig
from pathlib import Path

from sqlalchemy import engine_from_config, pool
from sqlalchemy.ext.asyncio import AsyncEngine
from alembic import context

# Add parent directory to path
sys.path.append(str(Path(__file__).parents[2]))

# Import models and database configuration
from db.models import Base
from db.session import get_database_url
from reagent.config import settings

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.

# Override sqlalchemy.url with environment variable if available
database_url = get_database_url(async_mode=False)
config.set_main_option("sqlalchemy.url", database_url)

# Schema configuration
SCHEMA_NAME = config.get_section_option("reagent", "schema_name", "reagent")

def include_object(object, name, type_, reflected, compare_to):
    """
    Filter objects to include in migrations.
    
    This function allows us to control which database objects
    are included in autogenerated migrations.
    """
    # Include only objects in our schema
    if hasattr(object, "schema"):
        return object.schema == SCHEMA_NAME
    return True

def render_item(type_, obj, autogen_context):
    """
    Custom rendering for schema-qualified names.
    
    This ensures that table names include the schema prefix
    in migration scripts.
    """
    if type_ == "table":
        # Add schema prefix to table names
        return f"{SCHEMA_NAME}.{obj.name}"
    return False

def run_migrations_offline() -> None:
    """
    Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.
    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        include_schemas=True,
        include_object=include_object,
        render_item=render_item,
        version_table_schema=SCHEMA_NAME,
        compare_type=True,
        compare_server_default=True,
    )

    with context.begin_transaction():
        # Create schema if it doesn't exist
        context.execute(f"CREATE SCHEMA IF NOT EXISTS {SCHEMA_NAME}")
        context.run_migrations()

def do_run_migrations(connection):
    """Run migrations with the given connection."""
    context.configure(
        connection=connection,
        target_metadata=target_metadata,
        include_schemas=True,
        include_object=include_object,
        render_item=render_item,
        version_table_schema=SCHEMA_NAME,
        compare_type=True,
        compare_server_default=True,
    )

    with context.begin_transaction():
        # Ensure schema exists
        context.execute(f"CREATE SCHEMA IF NOT EXISTS {SCHEMA_NAME}")
        # Set search path for this session
        context.execute(f"SET search_path TO {SCHEMA_NAME}, public")
        context.run_migrations()

async def run_migrations_online() -> None:
    """
    Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.
    """
    configuration = config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"] = get_database_url(async_mode=False)
    
    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
        future=True,
    )

    with connectable.connect() as connection:
        do_run_migrations(connection)

# Determine which mode to run in
if context.is_offline_mode():
    run_migrations_offline()
else:
    import asyncio
    asyncio.run(run_migrations_online())
