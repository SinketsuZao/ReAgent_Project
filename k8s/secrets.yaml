# Kubernetes Secrets for ReAgent
# IMPORTANT: This is a template file. Replace all base64 encoded values with your actual secrets
# To encode a value: echo -n "your-secret-value" | base64
# To decode a value: echo "base64-encoded-value" | base64 -d

apiVersion: v1
kind: Secret
metadata:
  name: reagent-secrets
  namespace: reagent
  labels:
    app: reagent
    component: secrets
type: Opaque
data:
  # OpenAI API Configuration
  # Replace with your actual API key: echo -n "sk-..." | base64
  OPENAI_API_KEY: c2stWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWA==
  
  # Database Credentials
  # Replace with your actual password: echo -n "your-strong-password" | base64
  POSTGRES_PASSWORD: cmVhZ2VudF9zdXBlcl9zZWNyZXRfcGFzc3dvcmQ=
  
  # Redis Password (if using Redis with authentication)
  # Replace with your Redis password: echo -n "redis-password" | base64
  REDIS_PASSWORD: ""
  
  # JWT Secret for API authentication
  # Replace with a strong secret: echo -n "your-jwt-secret-key" | base64
  JWT_SECRET_KEY: anVzdC1hLXJhbmRvbS1zZWNyZXQta2V5LWZvci1qd3Q=
  
  # Encryption key for sensitive data
  # Replace with a strong key: echo -n "32-character-encryption-key-here" | base64
  ENCRYPTION_KEY: dGhpcy1pcy1hLTMyLWNoYXJhY3Rlci1lbmNyeXB0aW9uLWtleQ==
  
  # S3 Credentials (if using S3 for backups)
  AWS_ACCESS_KEY_ID: ""
  AWS_SECRET_ACCESS_KEY: ""
  
  # Monitoring credentials
  GRAFANA_ADMIN_PASSWORD: YWRtaW4=  # Default: "admin"
  PROMETHEUS_ADMIN_PASSWORD: cHJvbWV0aGV1cw==  # Default: "prometheus"

---
# Secret for Docker Registry (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: reagent
  labels:
    app: reagent
type: kubernetes.io/dockerconfigjson
data:
  # Replace with your Docker registry credentials
  # Create with: kubectl create secret docker-registry docker-registry-secret \
  #   --docker-server=your-registry.com \
  #   --docker-username=your-username \
  #   --docker-password=your-password \
  #   --docker-email=your-email \
  #   --dry-run=client -o yaml
  .dockerconfigjson: ewogICJhdXRocyI6IHsKICAgICJ5b3VyLXJlZ2lzdHJ5LmNvbSI6IHsKICAgICAgInVzZXJuYW1lIjogInlvdXItdXNlcm5hbWUiLAogICAgICAicGFzc3dvcmQiOiAieW91ci1wYXNzd29yZCIsCiAgICAgICJlbWFpbCI6ICJ5b3VyLWVtYWlsQGV4YW1wbGUuY29tIiwKICAgICAgImF1dGgiOiAiZVc5MWNpMTFjMlZ5Ym1GdFpUcDViM1Z5TFhCaGMzTjNiM0prIgogICAgfQogIH0KfQ==

---
# TLS Certificate Secret (if using HTTPS)
apiVersion: v1
kind: Secret
metadata:
  name: reagent-tls
  namespace: reagent
  labels:
    app: reagent
type: kubernetes.io/tls
data:
  # Replace with your actual TLS certificate and key
  # tls.crt: base64 encoded certificate
  # tls.key: base64 encoded private key
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi4uLgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t

---
# Secret for Backup Encryption (GPG keys)
apiVersion: v1
kind: Secret
metadata:
  name: backup-encryption-keys
  namespace: reagent
  labels:
    app: reagent
    component: backup
type: Opaque
data:
  # GPG public key for encrypting backups
  gpg-public-key: LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCi4uLgotLS0tLUVORCBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0t
  # GPG private key for decrypting backups (store securely!)
  gpg-private-key: LS0tLS1CRUdJTiBQR1AgUFJJVkFURSBLRVkgQkxPQ0stLS0tLQouLi4KLS0tLS1FTkQgUEdQIFBSSVZBVEUgS0VZIEJMT0NLLS0tLS0=

---
# Secret for OAuth/SSO (if using external authentication)
apiVersion: v1
kind: Secret
metadata:
  name: oauth-secrets
  namespace: reagent
  labels:
    app: reagent
    component: auth
type: Opaque
data:
  # OAuth client credentials
  OAUTH_CLIENT_ID: eW91ci1vYXV0aC1jbGllbnQtaWQ=
  OAUTH_CLIENT_SECRET: eW91ci1vYXV0aC1jbGllbnQtc2VjcmV0
  OAUTH_REDIRECT_URI: aHR0cHM6Ly9yZWFnZW50LmV4YW1wbGUuY29tL2F1dGgvY2FsbGJhY2s=

---
# Secret for Webhook Authentication
apiVersion: v1
kind: Secret
metadata:
  name: webhook-secrets
  namespace: reagent
  labels:
    app: reagent
    component: webhooks
type: Opaque
data:
  # Slack webhook URL for notifications
  SLACK_WEBHOOK_URL: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvWFhYWC9ZWVlZL1paWlo=
  # GitHub webhook secret for CI/CD
  GITHUB_WEBHOOK_SECRET: Z2l0aHViLXdlYmhvb2stc2VjcmV0LWtleQ==

---
# Instructions for creating and managing secrets
apiVersion: v1
kind: ConfigMap
metadata:
  name: secrets-instructions
  namespace: reagent
  labels:
    app: reagent
    component: documentation
data:
  README.md: |
    # ReAgent Secrets Management
    
    ## Creating Secrets
    
    1. **Never commit real secrets to version control!**
    
    2. To create secrets from literal values:
    ```bash
    kubectl create secret generic reagent-secrets \
      --from-literal=OPENAI_API_KEY=sk-your-actual-key \
      --from-literal=POSTGRES_PASSWORD=your-strong-password \
      --namespace=reagent
    ```
    
    3. To create secrets from files:
    ```bash
    kubectl create secret generic reagent-secrets \
      --from-env-file=.env.production \
      --namespace=reagent
    ```
    
    4. To update existing secrets:
    ```bash
    # Export current secrets
    kubectl get secret reagent-secrets -o yaml > secrets-backup.yaml
    
    # Delete and recreate
    kubectl delete secret reagent-secrets -n reagent
    kubectl create secret generic reagent-secrets ... -n reagent
    ```
    
    ## Using Secrets in Pods
    
    Secrets are mounted as environment variables in the pods.
    See the deployment configurations for usage examples.
    
    ## Security Best Practices
    
    1. Use RBAC to limit access to secrets
    2. Enable encryption at rest for etcd
    3. Rotate secrets regularly
    4. Use external secret management (Vault, AWS Secrets Manager)
    5. Monitor secret access with audit logging
    
    ## External Secret Management
    
    For production, consider using:
    - HashiCorp Vault
    - AWS Secrets Manager
    - Azure Key Vault
    - Google Secret Manager
    - Kubernetes Sealed Secrets
    
    ## Backup and Recovery
    
    Always backup secrets before updates:
    ```bash
    kubectl get secrets -n reagent -o yaml > secrets-backup-$(date +%Y%m%d).yaml
    ```