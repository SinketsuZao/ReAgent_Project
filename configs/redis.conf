# Redis Configuration for ReAgent
# This configuration is optimized for the ReAgent multi-agent system

################################## INCLUDES ###################################

# include /path/to/local.conf
# include /path/to/other.conf

################################## MODULES #####################################

# loadmodule /path/to/my_module.so

################################## NETWORK #####################################

# Accept connections on the specified port, default is 6379
port 6379

# By default Redis listens for connections from all available network interfaces
# It is possible to listen to just one or multiple selected interfaces using
# the "bind" configuration directive
bind 0.0.0.0

# Protected mode is a layer of security protection, in order to avoid that
# Redis instances left open on the internet are accessed and exploited
protected-mode no

# Accept connections on the specified port, default is 6379.
# If port 0 is specified Redis will not listen on a TCP socket.
tcp-backlog 511

# Close the connection after a client is idle for N seconds (0 to disable)
timeout 0

# TCP keepalive
tcp-keepalive 300

################################# TLS/SSL #####################################

# By default, TLS/SSL is disabled. To enable it, the "tls-port" configuration
# directive can be used to define TLS-listening ports
# tls-port 6379

# Configure a X.509 certificate and private key to use for authenticating the
# server to connected clients, masters or cluster peers
# tls-cert-file redis.crt
# tls-key-file redis.key

################################# GENERAL #####################################

# By default Redis does not run as a daemon
daemonize no

# If you run Redis from upstart or systemd, Redis can interact with your
# supervision tree
supervised no

# If a pid file is specified, Redis writes it where specified at startup
# and removes it at exit
pidfile /var/run/redis_6379.pid

# Specify the server verbosity level
# debug, verbose, notice, warning
loglevel notice

# Specify the log file name. Also the empty string can be used to force
# Redis to log on the standard output
logfile ""

# Set the number of databases. The default database is DB 0
databases 16

# By default Redis shows an ASCII art logo only when started to log to the
# standard output and if the standard output is a TTY
always-show-logo no

################################ SNAPSHOTTING  ################################

# Save the DB on disk
save 900 1      # after 900 sec (15 min) if at least 1 key changed
save 300 10     # after 300 sec (5 min) if at least 10 keys changed
save 60 10000   # after 60 sec if at least 10000 keys changed

# By default Redis will stop accepting writes if RDB snapshots are enabled
# and the latest background save failed
stop-writes-on-bgsave-error yes

# Compress string objects using LZF when dump .rdb databases
rdbcompression yes

# Since version 5 of RDB a CRC64 checksum is placed at the end of the file
rdbchecksum yes

# The filename where to dump the DB
dbfilename dump.rdb

# Remove RDB files used by replication in instances without persistence
# enabled
rdb-del-sync-files no

# The working directory
dir /data

################################# REPLICATION #################################

# Master-Replica replication. Use replicaof to make a Redis instance a copy of
# another Redis server
# replicaof <masterip> <masterport>

# If the master is password protected
# masterauth <master-password>

# However it is possible to configure a replica to authenticate before
# starting the replication synchronization process
# masteruser <username>

# When a replica loses its connection with the master, or when the replication
# is still in progress, the replica can act in two different ways
replica-serve-stale-data yes

# You can configure a replica instance to accept writes or not
replica-read-only yes

# Replication SYNC strategy: disk or socket
repl-diskless-sync no

# When diskless replication is enabled, it is possible to configure the delay
# the server waits in order to spawn the child that transfers the RDB via socket
repl-diskless-sync-delay 5

# The replica priority is an integer number published by Redis in the INFO
# output
replica-priority 100

################################## SECURITY ###################################

# Warning: since Redis is pretty fast, an outside user can try up to
# 1 million passwords per second against a modern box
# requirepass foobared

# ACL LOG
acllog-max-len 128

# Command renaming
# rename-command CONFIG ""

################################### CLIENTS ####################################

# Set the max number of connected clients at the same time
maxclients 10000

############################## MEMORY MANAGEMENT ################################

# Set a memory usage limit to the specified amount of bytes
# ReAgent typically needs significant memory for caching
maxmemory 2gb

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
# is reached
# volatile-lru -> Remove the key with an expire set using an LRU algorithm
# allkeys-lru -> Remove any key according to the LRU algorithm
# volatile-lfu -> Remove the key with an expire set using an LFU algorithm
# allkeys-lfu -> Remove any key according to the LFU algorithm
# volatile-random -> Remove a random key with an expire set
# allkeys-random -> Remove a random key, any key
# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)
# noeviction -> Don't evict anything, just return an error on write operations
maxmemory-policy allkeys-lru

# LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated
# algorithms (in order to save memory), so you can tune it for speed or
# accuracy
maxmemory-samples 5

# Eviction processing is designed to function well with the default setting
replica-ignore-maxmemory yes

# Redis reclaims expired keys in two ways: upon access when those keys are
# found to be expired, and also in background, in what is called the
# "active expire key"
# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time
activerehashing yes

############################# LAZY FREEING ####################################

# Redis has two primitives to delete keys. One is called DEL and is a blocking
# deletion of the object
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no

# It is also possible, for the case when to replace the user code DEL calls
# with UNLINK calls is not easy, to modify the default behavior of the DEL
# command to act exactly like UNLINK, using the following configuration
# directive
lazyfree-lazy-user-del no

################################ THREADED I/O #################################

# Redis is mostly single threaded, however there are certain threaded
# operations such as UNLINK, slow I/O accesses and other things that are
# performed on side threads
# io-threads 4

# Setting io-threads to 1 will just use the main thread as usual
# io-threads-do-reads no

############################ KERNEL OOM CONTROL ##############################

# On Linux, it is possible to hint the kernel OOM killer on what processes
# should be killed first when out of memory
oom-score-adj no

#################### KERNEL transparent hugepage CONTROL ######################

disable-thp yes

############################## APPEND ONLY MODE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost
appendonly yes

# The name of the append only file (default: "appendonly.aof")
appendfilename "appendonly.aof"

# The fsync() call tells the Operating System to actually write data on disk
# instead of waiting for more data in the output buffer
# no: don't fsync, just let the OS flush the data when it wants. Faster.
# always: fsync after every write to the append only log. Slow, Safest.
# everysec: fsync only one time every second. Compromise.
appendfsync everysec

# When the AOF fsync policy is set to always or everysec, and a background
# saving process (a background save or AOF log background rewriting) is
# performing a lot of I/O against the disk
no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# An AOF file may be found to be truncated at the end during the Redis
# startup process
aof-load-truncated yes

# When rewriting the AOF file, Redis is able to use an RDB preamble in the
# AOF file for faster rewrites and recoveries
aof-use-rdb-preamble yes

################################ LUA SCRIPTING  ###############################

# Max execution time for a Lua script in milliseconds
lua-time-limit 5000

################################ REDIS CLUSTER  ###############################

# Normal Redis instances can't be part of a Redis Cluster; only nodes that are
# started as cluster nodes can
# cluster-enabled yes

################################## SLOW LOG ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time
slowlog-log-slower-than 10000

# There is no limit to this length. Just be aware that it will consume memory
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# The Redis latency monitoring subsystem samples different operations
# at runtime in order to collect data related to possible sources of
# latency of a Redis instance
latency-monitor-threshold 0

############################# EVENT NOTIFICATION ##############################

# Redis can notify Pub/Sub clients about events happening in the key space
# K     Keyspace events, published with __keyspace@<db>__ prefix.
# E     Keyevent events, published with __keyevent@<db>__ prefix.
# g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
# $     String commands
# l     List commands
# s     Set commands
# h     Hash commands
# z     Sorted set commands
# t     Stream commands
# d     Module key type events
# x     Expired events (events generated every time a key expires)
# e     Evicted events (events generated when a key is evicted for maxmemory)
# m     Key miss events (events generated when a key that doesn't exist is accessed)
# A     Alias for "g$lshztxed", so that the "AKE" string means all the events except "m".
notify-keyspace-events "Ex"

############################### ADVANCED CONFIG ###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# Lists are also encoded in a special way to save a lot of space
list-max-ziplist-size -2

# Lists may also be compressed
list-compress-depth 0

# Sets have a special encoding in just one case: when a set is composed
# of just strings that happen to be integers in radix 10 in the range
# of 64 bit signed integers
set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation bytes limit
hll-sparse-max-bytes 3000

# Streams macro node max size / items
stream-node-max-bytes 4096
stream-node-max-entries 100

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Client query buffers accumulate new commands
# client-query-buffer-limit 1gb

# Protocol bulk requests max size
# proto-max-bulk-len 512mb

# Redis calls an internal function to perform many background tasks
hz 10

# When dynamic HZ is enabled, the actual configured HZ will be used
# as a baseline, but multiples of the configured HZ value will be actually
# used as needed
dynamic-hz yes

# When a child rewrites the AOF file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated
aof-rewrite-incremental-fsync yes

# When redis saves RDB file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated
rdb-save-incremental-fsync yes

# Redis LFU eviction (see maxmemory setting) can be tuned
# lfu-log-factor 10
# lfu-decay-time 1

########################### ACTIVE DEFRAGMENTATION #######################

# Enabled active defragmentation
# activedefrag no

# Minimum percentage of fragmentation to start active defrag
# active-defrag-ignore-bytes 100mb

# Minimum percentage of fragmentation to start active defrag
# active-defrag-threshold-lower 10

# Maximum percentage of fragmentation to force active defrag
# active-defrag-threshold-upper 100

# Minimal effort for defrag in CPU percentage, to be used when the lower
# threshold is reached
# active-defrag-cycle-min 1

# Maximal effort for defrag in CPU percentage, to be used when the upper
# threshold is reached
# active-defrag-cycle-max 25

# Maximum number of set/hash/zset/list fields that will be processed from
# the main dictionary scan
# active-defrag-max-scan-fields 1000

# Jemalloc background thread for purging will be enabled by default
jemalloc-bg-thread yes

# It is possible to pin different threads and processes of Redis to specific
# CPUs in your system, in order to maximize the performances of the server
# server_cpulist 0-7:2
# bio_cpulist 1,3
# aof_rewrite_cpulist 8-11
# bgsave_cpulist 1,10-11

########################### REAGENT SPECIFIC SETTINGS #########################

# ReAgent uses Redis for:
# 1. Message passing between agents (pub/sub)
# 2. Caching question results
# 3. Storing temporary checkpoints
# 4. Real-time metrics distribution

# Set appropriate timeout for long-running operations
timeout 0

# Ensure pub/sub clients don't timeout
tcp-keepalive 60

# Optimize for ReAgent's usage patterns
# - Many small messages (agent communications)
# - Medium-sized cache entries (question results)
# - Temporary data with TTL (checkpoints)

# Increase output buffer for pub/sub to handle burst of messages
client-output-buffer-limit pubsub 64mb 32mb 120

# Enable keyspace notifications for cache expiration
notify-keyspace-events Ex

# Optimize memory for mixed workload
maxmemory-policy allkeys-lru
maxmemory-samples 10

# AOF settings for durability with good performance
appendonly yes
appendfsync everysec
no-appendfsync-on-rewrite no

# Save snapshots regularly but not too frequently
save 900 1
save 300 10
save 60 10000

# Enable active defragmentation for long-running instances
activedefrag yes
active-defrag-ignore-bytes 100mb
active-defrag-threshold-lower 10
active-defrag-threshold-upper 100
active-defrag-cycle-min 5
active-defrag-cycle-max 75
